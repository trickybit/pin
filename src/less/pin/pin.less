@import "../../../bower_components/seltzer/src/less/seltzer/slice";

.pin(@area, @point, @orient:row) {
  @_area: @area;
  @_point: @point;
  @_orient: @orient;
  @_offsets:
  0 auto auto 0, 0 auto auto auto, 0 0 auto auto,
  auto auto auto 0, auto auto auto auto, auto 0 auto auto,
  auto auto 0 0, auto auto 0 auto, auto 0 0 auto;

  max-width: extract(@_area, 1);
  min-height: extract(@_area, 2);
  display: flex;
  position: relative;

  &:before {
    display: block;
    position: absolute;
    z-index: -1;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
    background-size: cover;
    background-repeat: no-repeat;
  }

  .image(@url) {
    &:before {
      background-position: @_point;

      @content: "";
      @image: url(@url);

      & when(@url = none) {
        @content: @url;
        @image: @url;

      }

      content: @content;
      background-image: @image;
    }
  }

  .guide() {
    @guide: fade(blue, 50);
    @rule: fade(magenta, 50);
    background+: linear-gradient(0, @guide, @guide);
    background-size+: 1px 1px;
    background+: linear-gradient(0, @guide, @guide);
    background-size+: 1px 1px;
    background+: linear-gradient(0, @rule 1px, transparent 1px);
    background-size+: 1em 1em;
    background+: linear-gradient(90deg, @rule 1px, transparent 1px);
    background-size+: 1em 1em;
    background-repeat: repeat-x, repeat-y, repeat, repeat;
    background-position: @_point, @_point, 0 0, 0 0;
  }

  .in(@slice) {
    @row-alignments: top middle bottom;
    @col-alignments: left center right;
    @align-factors: 0 0 -1;
    @flows: row column;
    @flex-alignments: flex-start, center, flex-end;


    .slice.off.col(length(@row-alignments) x length(@col-alignments); @slice; {
      .slice-length(max-width, 1, @slice-offset);
      align-self: extract(@flex-alignments, @slice-offset);
    });
    .slice.off.row(length(@row-alignments) x length(@col-alignments); @slice; {
      .slice-length(min-height, 2, @slice-offset);
    });
    margin: extract(@_offsets, @slice);
    .side(@slice) {

    }

    .slice-length(@prop, @vector, @offset) {
      @align-factors: 0 0 -1;

      @vector-length: extract(@_area, @vector);
      @vector-bound: extract(@_point, @vector);

      @aligned-basis: @vector-length * extract(@align-factors, @offset);
      @{prop}: abs(@aligned-basis + (@vector-length * unit(@vector-bound / 100)));
    }

  }

}
